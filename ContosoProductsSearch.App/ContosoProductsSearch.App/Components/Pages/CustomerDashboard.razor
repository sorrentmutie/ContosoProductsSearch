@page "/customerdashboard"
@using ContosoProductsSearch.App.ExtensionMethods
@using ContosoProductsSearch.Core.ViewModel

@attribute [Authorize(Roles = "User")]
@inject ICategorieBusiness categorieBusinessService
@* @inject MappingUserToCustomer mappingUserToCustomer *@
@inject AuthenticationStateProvider authenticationStateProvider
@inject IConfiguration configuration

 @if (categorieConsigliate is not null && categorieConsigliate.Categorie is not null)
{
    foreach (var categoria in categorieConsigliate.Categorie)
    {
        <p>@categoria.Nome</p>

        if (categoria.Prodotti is not null)
        {
            <h3>Potresti essere interessato a</h3>

            foreach (var prodotto in categoria.Prodotti)
            {
                <SchedaProdotto Prodotto="prodotto" Categoria=@categoria.Nome/>
            }
        }
    }
}


@code {
    private CategorieVM? categorieConsigliate = new();
    private bool isBirthday;

    protected override async Task OnInitializedAsync()
    {
        var authestate = await authenticationStateProvider.GetAuthenticationStateAsync();
        
        var nomeClaim = configuration["ClaimCompleanno"];
        if (nomeClaim is not null)
        {
            isBirthday = authestate.IsBirthday(nomeClaim);
        }


        if (!string.IsNullOrEmpty(authestate.User?.Identity?.Name))
        {
            var customerClaim = authestate.User.Claims.FirstOrDefault(c => c.Type == "CustomerName");
            if (customerClaim is not null)
            {
                categorieConsigliate = (await categorieBusinessService.GetCategorieVM(customerClaim.Value, isBirthday));
            }
        }
    }
}
